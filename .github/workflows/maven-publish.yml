name: Microservice Application Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  IMAGE_TAG: "latest"

jobs:
  ci-build:
    name: CI Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Compile Code
        run: mvn clean package
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{vars.AWS_SECRET_ACCESS_KEY}}
    
      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{secreats.REGESTRY}}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: micro-service-application
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ${{github.workspace}}/src/Dockerfile ${{github.workspace}}
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG 

  cd-deploy:
    name: CD Deployment
    needs: ci-build
    runs-on: ubuntu-latest
    environment: 
      name: production  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{vars.AWS_SECRET_ACCESS_KEY}}

      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{secreats.REGESTRY}}
          
      - name: Import Kubeconfig
        run: |
          mkdir -p ${{github.workspace}}/.kube
          echo "${{secrets.KUBECONFIG}}" > ${{github.workspace}}/.kube/config
          
      - name: Deploy to Amazon EKS
        env:
          KUBECONFIG: ${{github.workspace}}/.kube/config 
        run: |
          kubectl apply -f ${{github.workspace}}/manifestfile.yml
